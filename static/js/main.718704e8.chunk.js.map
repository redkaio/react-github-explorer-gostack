{"version":3,"sources":["assets/gitlogo.svg","pages/Dashboard/styles.ts","services/api.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","pages/Header/styles.ts","pages/DropdownButton/styles.ts","pages/DropdownButton/index.tsx","pages/Header/index.tsx","routes/index.tsx","assets/gitbackground.svg","styles/global.ts","App.tsx","index.tsx"],"names":["Title","styled","h1","Form","form","props","hasError","css","shade","Error","span","Repositories","div","api","axios","create","baseURL","Dashboard","useState","newRepo","setNewRepo","inputError","setInputError","storagedRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","gitlogo","alt","onSubmit","value","onChange","e","target","placeholder","type","map","to","full_name","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","params","useRouteMatch","setRepository","issues","setIssues","then","stargazers_count","forks_count","open_issues_count","issue","href","html_url","title","user","id","ChatHeader","ChatButton","button","DropdownButton","React","dropdownMenu","setDropdownMenu","handleClose","onClick","currentTarget","Menu","anchorEl","keepMounted","open","Boolean","onClose","MenuItem","Routes","path","exact","component","createGlobalStyle","gitbackground","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.718704e8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/gitlogo.6354bf3f.svg\";","import styled, { css } from \"styled-components\";\r\nimport { shade } from \"polished\";\r\n\r\ninterface FormProps {\r\n  hasError: boolean;\r\n}\r\n\r\nexport const Title = styled.h1`\r\n  font-size: 48px;\r\n  color: #3a3a3a;\r\n  margin-top: 80px;\r\n  max-width: 450px;\r\n  line-height: 56px;\r\n`;\r\n\r\nexport const Form = styled.form<FormProps>`\r\n  margin-top: 40px;\r\n  max-width: 700px;\r\n  display: flex;\r\n\r\n  input {\r\n    flex: 1;\r\n    height: 70px;\r\n    padding: 0 24px;\r\n    border: 0;\r\n    border-radius: 5px 0 0 5px;\r\n    color: #3a3a3a;\r\n    border: 2px solid #fff;\r\n\r\n    ${(props) => props.hasError && css`\r\n    border-color: #c53030;\r\n    border-right: 0;\r\n    `}\r\n\r\n    &::placeholder {\r\n      color: #a8a8b3;\r\n    }\r\n  }\r\n\r\n  button {\r\n    width: 210px;\r\n    height: 70px;\r\n    background: #04d361;\r\n    border-radius: 0px 5px 5px 0px;\r\n    border: 0;\r\n    color: #fff;\r\n    font-weight: bold;\r\n    transition: background-color 0.2s;\r\n\r\n    &:hover {\r\n      background: ${shade(0.2, \"#04d361\")};\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Error = styled.span`\r\n  display: block;\r\n  color: #c53030;\r\n  margin-top: 8px;\r\n`;\r\n\r\nexport const Repositories = styled.div`\r\n  margin-top: 80px;\r\n  max-width: 700px;\r\n\r\n  a {\r\n    background: white;\r\n    border-radius: 5px;\r\n    padding: 24px;\r\n    display: block;\r\n    text-decoration: none;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    transition: transform 0.2s;\r\n\r\n    &:hover {\r\n      transform: translateX(10px);\r\n    }\r\n\r\n    & + a {\r\n      margin-top: 16px;\r\n    }\r\n\r\n    img {\r\n      width: 64px;\r\n      height: 64px;\r\n      border-radius: 50%;\r\n    }\r\n\r\n    div {\r\n      margin: 0 16px;\r\n      flex: 1;\r\n\r\n      strong {\r\n        font-size: 20px;\r\n        color: #3d3d4d;\r\n      }\r\n\r\n      p {\r\n        font-size: 18px;\r\n        color: #a8a8b3;\r\n        margin-top: 4px;\r\n      }\r\n    }\r\n    svg {\r\n      margin-left: auto;\r\n      color: #cbcbd6;\r\n    }\r\n  }\r\n`;\r\n","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'https://api.github.com'\r\n});\r\n\r\nexport default api;","import React, { useState, useEffect, FormEvent } from 'react';\r\nimport gitlogo from '../../assets/gitlogo.svg';\r\nimport { Title, Form, Repositories, Error } from './styles';\r\nimport { FiChevronRight } from 'react-icons/fi';\r\nimport api from '../../services/api';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface Repository {\r\n  full_name: string;\r\n  description: string;\r\n  owner: {\r\n    login: string;\r\n    avatar_url: string;\r\n  };\r\n}\r\n\r\nconst Dashboard: React.FC = () => {\r\n  const [newRepo, setNewRepo] = useState('');\r\n  const [inputError, setInputError] = useState('');\r\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\r\n    const storagedRepositories = localStorage.getItem('@GithubExplorer: repositories');\r\n    if (storagedRepositories) {\r\n      return JSON.parse(storagedRepositories);\r\n    } else {\r\n      return [];\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('@GithubExplorer: repositories',\r\n    JSON.stringify(repositories));\r\n  }, [repositories]);\r\n\r\n\r\n\r\n\r\n  async function handleAddRepository(event: FormEvent<HTMLFormElement>): Promise<void> {\r\n\r\n    event.preventDefault();\r\n\r\n    if (!newRepo) {\r\n      setInputError('Digite o nome autor/nome do reposit贸rio');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await api.get<Repository>(`repos/${newRepo}`);\r\n      const repository = response.data;\r\n\r\n      setRepositories([...repositories, repository]);\r\n      setNewRepo('');\r\n      setInputError('');\r\n\r\n    } catch (err) {\r\n      setInputError('Erro na busca por esse reposit贸rio');\r\n    }\r\n};\r\n\r\n  return (\r\n    <>\r\n      <img src={gitlogo} alt=\"Github Explorer\" />\r\n      <Title>Explore Reposit贸rios no Github</Title>\r\n\r\n      <Form hasError={!!inputError}onSubmit={handleAddRepository}>\r\n        <input\r\n          value={newRepo}\r\n          onChange={e => setNewRepo(e.target.value)}\r\n          placeholder=\"Digite o nome do reposit贸rio\"\r\n        />\r\n        <button type=\"submit\">Pesquisar</button>\r\n      </Form>\r\n\r\n      {inputError && <Error>{inputError}</Error>}\r\n\r\n      <Repositories>\r\n        {repositories.map(repository => (\r\n          <Link key={repository.full_name} to={`/repositories/${repository.full_name}`}>\r\n            <img\r\n              src={repository.owner.avatar_url}\r\n              alt={repository.owner.login}\r\n            />\r\n            <div>\r\n              <strong>{repository.full_name}</strong>\r\n              <p>{repository.description}</p>\r\n            </div>\r\n\r\n            <FiChevronRight size={20} />\r\n          </Link>\r\n        ))}\r\n      </Repositories>\r\n\r\n    </>\r\n  );\r\n};\r\nexport default Dashboard;\r\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\ndisplay: flex;\nalign-items: center;\njustify-content: space-between;\n\na {\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  color: #a8a8b3;\n\n  &:hover {\n    color: blue;\n    transition: color 0.2s;\n  }\n\n  svg {\n    margin-right: 4px;\n  }\n}\n`;\n\nexport const RepositoryInfo = styled.section`\n  margin-top: 80px;\n\n  header {\n    display: flex;\n    align-items: center;\n\n    img {\n      width: 120px;\n      height: 120px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 24px;\n\n      strong {\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #737380;\n        margin-top: 4px;\n      }\n    }\n  }\n\n  ul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n\n    li {\n      & + li {\n        margin-left: 80px;\n      }\n    }\n\n     li {\n       strong {\n         display: block;\n         font-size: 36px;\n         color: #3d3d4d;\n       }\n\n       span {\n         display: block;\n         margin-top: 4px;\n         color: #6c6c80;\n       }\n     }\n  }\n`;\n\nexport const Issues = styled.div`\n  margin-top: 80px;\n\n  a {\n    background: white;\n    border-radius: 5px;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n    svg {\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`;","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport { Header, RepositoryInfo, Issues } from './styles';\nimport gitlogo from '../../assets/gitlogo.svg';\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\nimport api from '../../services/api';\n\ninterface RepositoryParams {\n  repository: string\n}\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  owner: {\n    login: string,\n    avatar_url: string\n  };\n}\n\ninterface Issue {\n  id: number;\n  title: string;\n  user: {\n    login: string;\n  }\n  html_url: string;\n}\n\nconst Repository: React.FC = () => {\n  const { params } = useRouteMatch<RepositoryParams>();\n\n  const [repository, setRepository] = useState<Repository | null>(null);\n  const [issues, setIssues] = useState<Issue[]>([]);\n\n  useEffect(() => {\n    api.get(`repos/${params.repository}`).then((response)=> {\n      setRepository(response.data);\n    })\n\n    api.get(`repos/${params.repository}/issues`).then((response)=> {\n      setIssues(response.data);\n    })\n  }, [params.repository]);\n\n  return (\n    <>\n      <Header>\n        <img src={gitlogo} alt=\"Github Explorer\" />\n        <Link to='/'>\n          <FiChevronLeft size={16} />\n          Voltar\n        </Link>\n      </Header>\n\n      { repository && (\n        <RepositoryInfo>\n        <header>\n          <img src={repository.owner.avatar_url} alt={repository.owner.login} />\n          <div>\n            <strong>{repository.full_name}</strong>\n            <p>{repository.description}</p>\n          </div>\n        </header>\n        <ul>\n          <li>\n            <strong>{repository.stargazers_count}</strong>\n            <span>Stars</span>\n          </li>\n          <li>\n            <strong>{repository.forks_count}</strong>\n            <span>Forks</span>\n          </li>\n          <li>\n            <strong>{repository.open_issues_count}</strong>\n            <span>Issues abertos</span>\n          </li>\n        </ul>\n      </RepositoryInfo>\n      )}\n\n      <Issues>\n        {issues.map(issue => (\n          <a key={issue.id} href={issue.html_url} >\n          <div>\n            <strong>{issue.title}</strong>\n            <p>{issue.user.login}</p>\n          </div>\n\n          <FiChevronRight size={20} />\n        </a>\n        ))}\n      </Issues>\n\n    </>\n  );\n};\n\nexport default Repository;\n","import styled from \"styled-components\";\r\n\r\nexport const ChatHeader = styled.header`\r\n  box-sizing: border-box;\r\n  max-width: 900px;\r\n  font-size: 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 1rem;\r\n  margin: 0px;\r\n  background-color: #298A53;\r\n  color: #fff;\r\n  border-radius: 5px;\r\n`;\r\n\r\n","import styled from \"styled-components\";\r\nimport { shade } from 'polished';\r\n\r\nexport const ChatButton = styled.button`\r\nbackground-color: transparent;\r\ndisplay: flex;\r\ncolor: #fff;\r\nborder: none;\r\nborder-radius: 50%;\r\npadding: 5px;\r\ntransition: background-color 0.2s;\r\n\r\n&:hover {\r\n    background: ${shade(0.1, '#298A53')}\r\n  }\r\n\r\n\r\n\r\n`;\r\n","import React from 'react';\r\nimport { Menu, MenuItem } from '@material-ui/core';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport { ChatButton } from './styles';\r\n\r\nconst DropdownButton: React.FC = () => {\r\n\r\n  const [dropdownMenu, setDropdownMenu] = React.useState(null);\r\n\r\n  const handleClick = (event: any) => {\r\n    setDropdownMenu(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setDropdownMenu(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <ChatButton onClick={handleClick}>\r\n          <MoreVertIcon />\r\n        </ChatButton>\r\n        <Menu\r\n          id=\"simple-menu\"\r\n          anchorEl={dropdownMenu}\r\n          keepMounted\r\n          open={Boolean(dropdownMenu)}\r\n          onClose={handleClose}\r\n        >\r\n          <MenuItem onClick={handleClose}>Finalizar atendimento</MenuItem>\r\n          <MenuItem onClick={handleClose}>Dados do usu谩rio</MenuItem>\r\n        </Menu>\r\n        </>\r\n  )\r\n}\r\n\r\nexport default DropdownButton;","import React from 'react';\r\nimport { ChatHeader } from './styles';\r\nimport DropdownButton from '../DropdownButton/index';\r\n\r\nconst Header: React.FC = () => {\r\n\r\n  return (\r\n    <>\r\n      <ChatHeader>\r\n        Nome do cliente\r\n        <DropdownButton />\r\n      </ChatHeader>\r\n\r\n\r\n    </>\r\n  )\r\n};\r\nexport default Header;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Dashboard from '../pages/Dashboard/index';\r\nimport Repository from '../pages/Repository/index';\r\nimport Header from '../pages/Header/index';\r\n\r\nconst Routes: React.FC = () => (\r\n  <Switch>\r\n    <Route path=\"/\" exact component={Dashboard} />\r\n    <Route path=\"/repositories/:repository+\" component={Repository} />\r\n    <Route path=\"/header\" component={Header} />\r\n  </Switch>\r\n);\r\n\r\nexport default Routes;\r\n","export default __webpack_public_path__ + \"static/media/gitbackground.2b8edc72.svg\";","import { createGlobalStyle } from 'styled-components';\r\nimport gitbackground from '../assets/gitbackground.svg';\r\n\r\nexport default createGlobalStyle`\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  background: #f0f0f5 url(${gitbackground}) no-repeat 70% top;\r\n  -font-smoothing: antialiased;\r\n}\r\n\r\nbody, input, button {\r\n  font: 16px Roboto, sans-serif;\r\n}\r\n\r\n#root {\r\n  max-width: 960px;\r\n  margin: 0 auto;\r\n  padding: 40px 20px;\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n}\r\n`;","import React from 'react';\r\nimport Routes from './routes/index';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport GlobalStyle from './styles/global';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <>\r\n      <BrowserRouter>\r\n        <Routes />\r\n      </BrowserRouter>\r\n    <GlobalStyle />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}